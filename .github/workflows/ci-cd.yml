name: Voice AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Cache server dependencies
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-server-
            
      - name: Cache client dependencies
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-client-
          
      - name: Install server dependencies
        run: |
          cd server
          npm ci
          
      - name: Run server tests
        run: |
          cd server
          npm test
          
      - name: Install client dependencies
        run: |
          cd client
          npm ci
          
      - name: Run client tests
        run: |
          cd client
          npm test
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          cd training
          pip install -r requirements.txt
          
      - name: Run training tests
        run: |
          cd training
          python -m unittest discover tests

  build:
    name: Build
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push server image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: |
            voiceai/server:latest
            voiceai/server:${{ github.sha }}
            
      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: |
            voiceai/client:latest
            voiceai/client:${{ github.sha }}

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Deploy to production
        run: |
          ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/voice-ai && \
          docker-compose pull && \
          docker-compose up -d && \
          echo 'Deployment complete!'"
          
      - name: Run database migrations
        run: |
          ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/voice-ai && \
          docker-compose exec -T server npm run migrate"
          
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: Production Deployment
          SLACK_MESSAGE: 'Voice AI has been deployed to production! ðŸš€'
          SLACK_COLOR: good
